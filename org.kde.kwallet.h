
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__org_kde_kwallet_h__PROXY_MARSHAL_H
#define __dbusxx__org_kde_kwallet_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace kde {

class KWallet_proxy
 : public ::DBus::InterfaceProxy
{
public:

    KWallet_proxy()
    : ::DBus::InterfaceProxy("org.kde.KWallet")
    {
        connect_signal(KWallet_proxy, walletListDirty, _walletListDirty_stub);
        connect_signal(KWallet_proxy, walletCreated, _walletCreated_stub);
        connect_signal(KWallet_proxy, walletOpened, _walletOpened_stub);
        connect_signal(KWallet_proxy, walletAsyncOpened, _walletAsyncOpened_stub);
        connect_signal(KWallet_proxy, walletDeleted, _walletDeleted_stub);
        connect_signal(KWallet_proxy, walletClosed, _walletClosed_stub);
        connect_signal(KWallet_proxy, walletClosed, _walletClosed_stub);
        connect_signal(KWallet_proxy, allWalletsClosed, _allWalletsClosed_stub);
        connect_signal(KWallet_proxy, folderListUpdated, _folderListUpdated_stub);
        connect_signal(KWallet_proxy, folderUpdated, _folderUpdated_stub);
        connect_signal(KWallet_proxy, applicationDisconnected, _applicationDisconnected_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    bool isEnabled()
    {
        ::DBus::CallMessage call;
        call.member("isEnabled");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    int32_t open(const std::string& wallet, const int64_t& wId, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << wId;
        wi << appid;
        call.member("open");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t openPath(const std::string& path, const int64_t& wId, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        wi << wId;
        wi << appid;
        call.member("openPath");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t openAsync(const std::string& wallet, const int64_t& wId, const std::string& appid, const bool& handleSession)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << wId;
        wi << appid;
        wi << handleSession;
        call.member("openAsync");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t openPathAsync(const std::string& path, const int64_t& wId, const std::string& appid, const bool& handleSession)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        wi << wId;
        wi << appid;
        wi << handleSession;
        call.member("openPathAsync");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t close(const std::string& wallet, const bool& force)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << force;
        call.member("close");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t close(const int32_t& handle, const bool& force, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << force;
        wi << appid;
        call.member("close");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void sync(const int32_t& handle, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << appid;
        call.member("sync");
        ::DBus::Message ret = invoke_method(call);
    }

    int32_t deleteWallet(const std::string& wallet)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        call.member("deleteWallet");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    bool isOpen(const std::string& wallet)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        call.member("isOpen");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    bool isOpen(const int32_t& handle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        call.member("isOpen");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > users(const std::string& wallet)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        call.member("users");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void changePassword(const std::string& wallet, const int64_t& wId, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << wId;
        wi << appid;
        call.member("changePassword");
        ::DBus::Message ret = invoke_method(call);
    }

    std::vector< std::string > wallets()
    {
        ::DBus::CallMessage call;
        call.member("wallets");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > folderList(const int32_t& handle, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << appid;
        call.member("folderList");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    bool hasFolder(const int32_t& handle, const std::string& folder, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << appid;
        call.member("hasFolder");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    bool createFolder(const int32_t& handle, const std::string& folder, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << appid;
        call.member("createFolder");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    bool removeFolder(const int32_t& handle, const std::string& folder, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << appid;
        call.member("removeFolder");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > entryList(const int32_t& handle, const std::string& folder, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << appid;
        call.member("entryList");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > readEntry(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > readMap(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readMap");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::string readPassword(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readPassword");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > readEntryList(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readEntryList");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > readMapList(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readMapList");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > readPasswordList(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("readPasswordList");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    int32_t renameEntry(const int32_t& handle, const std::string& folder, const std::string& oldName, const std::string& newName, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << oldName;
        wi << newName;
        wi << appid;
        call.member("renameEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t writeEntry(const int32_t& handle, const std::string& folder, const std::string& key, const std::vector< uint8_t >& value, const int32_t& entryType, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << value;
        wi << entryType;
        wi << appid;
        call.member("writeEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t writeEntry(const int32_t& handle, const std::string& folder, const std::string& key, const std::vector< uint8_t >& value, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << value;
        wi << appid;
        call.member("writeEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t writeMap(const int32_t& handle, const std::string& folder, const std::string& key, const std::vector< uint8_t >& value, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << value;
        wi << appid;
        call.member("writeMap");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t writePassword(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& value, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << value;
        wi << appid;
        call.member("writePassword");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    bool hasEntry(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("hasEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    int32_t entryType(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("entryType");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t removeEntry(const int32_t& handle, const std::string& folder, const std::string& key, const std::string& appid)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << handle;
        wi << folder;
        wi << key;
        wi << appid;
        call.member("removeEntry");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    bool disconnectApplication(const std::string& wallet, const std::string& application)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << application;
        call.member("disconnectApplication");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    void reconfigure()
    {
        ::DBus::CallMessage call;
        call.member("reconfigure");
        ::DBus::Message ret = invoke_method(call);
    }

    bool folderDoesNotExist(const std::string& wallet, const std::string& folder)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << folder;
        call.member("folderDoesNotExist");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    bool keyDoesNotExist(const std::string& wallet, const std::string& folder, const std::string& key)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << folder;
        wi << key;
        call.member("keyDoesNotExist");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    void closeAllWallets()
    {
        ::DBus::CallMessage call;
        call.member("closeAllWallets");
        ::DBus::Message ret = invoke_method(call);
    }

    std::string networkWallet()
    {
        ::DBus::CallMessage call;
        call.member("networkWallet");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string localWallet()
    {
        ::DBus::CallMessage call;
        call.member("localWallet");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void pamOpen(const std::string& wallet, const std::vector< uint8_t >& passwordHash, const int32_t& sessionTimeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << wallet;
        wi << passwordHash;
        wi << sessionTimeout;
        call.member("pamOpen");
        ::DBus::Message ret = invoke_method(call);
    }


public:

    /* signal handlers for this interface */
     
    virtual void walletListDirty() {};
    virtual void walletCreated(const std::string& wallet) {};
    virtual void walletOpened(const std::string& wallet) {};
    virtual void walletAsyncOpened(const int32_t& tId, const int32_t& handle) {};
    virtual void walletDeleted(const std::string& wallet) {};
    virtual void walletClosed(const std::string& wallet) {};
    virtual void walletClosed(const int32_t& handle) {};
    virtual void allWalletsClosed() {};
    virtual void folderListUpdated(const std::string& wallet) {};
    virtual void folderUpdated(const std::string& argin0, const std::string& argin1) {};
    virtual void applicationDisconnected(const std::string& wallet, const std::string& application) {};

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _walletListDirty_stub(const ::DBus::SignalMessage &sig)
    {
        walletListDirty();
    }
    void _walletCreated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        walletCreated(wallet);
    }
    void _walletOpened_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        walletOpened(wallet);
    }
    void _walletAsyncOpened_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tId; ri >> tId;
        int32_t handle; ri >> handle;
        walletAsyncOpened(tId, handle);
    }
    void _walletDeleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        walletDeleted(wallet);
    }
    void _walletClosed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        walletClosed(wallet);
    }

    void _allWalletsClosed_stub(const ::DBus::SignalMessage &sig)
    {
        allWalletsClosed();
    }
    void _folderListUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        folderListUpdated(wallet);
    }
    void _folderUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0; ri >> arg0;
        std::string arg1; ri >> arg1;
        folderUpdated(arg0, arg1);
    }
    void _applicationDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string wallet; ri >> wallet;
        std::string application; ri >> application;
        applicationDisconnected(wallet, application);
    }
};

} } 
#endif//__dbusxx__org_kde_kwallet_h__PROXY_MARSHAL_H
